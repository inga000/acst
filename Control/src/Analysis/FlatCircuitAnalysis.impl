/**************************************************************************************************
 *  Main authors:
 *     Inga Abel <inga.abel@tum.de>, 
 *	   Maximilian Neuner <maximilian.neuner@tum.de>, 
 *     Michael Eik <michael.eick@tum.de>
 *
 * 
 *  Copyright (C) 2021
 *  Chair of Electronic Design Automation
 *  Univ.-Prof. Dr.-Ing. Ulf Schlichtmann
 *  TU Muenchen
 *  Arcisstrasse 21
 *  D-80333 Muenchen
 *  Germany
 *
 *  This file is part of acst, a analog circuit analysis, sizing and synthesis enviroment:
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *************************************************************************************************/

#include "Control/incl/Analysis/FlatCircuitAnalysis.h"
#include "Core/incl/Circuit/Circuit.h"
#include "Core/incl/FlatCircuitRecursion/FlatCircuitRecursion.h"
#include "Core/incl/Common/BacktraceAssert.h"
#include "Log/incl/LogMacros.h"

namespace Control {

	template <class LocalOptions>
	inline FlatCircuitAnalysis<LocalOptions>::FlatCircuitAnalysis():
        CircuitAnalysis<LocalOptions>(),
        flatCircuit_(nullptr)
    {
		
    }

	template <class LocalOptions>
	inline  FlatCircuitAnalysis<LocalOptions>::~FlatCircuitAnalysis()
    {
    	 delete flatCircuit_;
    }

	template <class LocalOptions>
	inline void FlatCircuitAnalysis<LocalOptions>::createNewFlatCircuit()
    {
        Core::FlatCircuitRecursion flatCircuitRecursion;
        flatCircuit_ = flatCircuitRecursion.createNewFlatCopy(this->getCircuit());
    }

	template <class LocalOptions>
	inline const Core::Circuit& FlatCircuitAnalysis<LocalOptions>::getFlatCircuit() const
    {
        if(!hasFlatCircuit())
        {
        	createNewFlatCircuit();
        }
        return *flatCircuit_;
    }

	template <class LocalOptions>
	inline Core::Circuit& FlatCircuitAnalysis<LocalOptions>::getFlatCircuit()
    {
        if(!hasFlatCircuit())
        {
        	createNewFlatCircuit();
        }
        return *flatCircuit_;
    }

	template <class LocalOptions>
	inline bool FlatCircuitAnalysis<LocalOptions>::hasFlatCircuit() const
    {
        return flatCircuit_ != nullptr;
    }
}
